// This is your Prisma schema file for AWS RDS PostgreSQL
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("AWS_DATABASE_URL")
}

// User model with authentication and role-based access
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          UserRole  @default(EMPLOYEE)
  restaurantId  String?
  restaurant    Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  // NextAuth.js fields
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // Incident tracking
  incidents     Incident[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

// Restaurant/Business model
model Restaurant {
  id          String     @id @default(cuid())
  name        String
  email       String     @unique
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  
  // Users and incidents
  users       User[]
  incidents   Incident[]
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("restaurants")
}

// Incident tracking model
model Incident {
  id              String         @id @default(cuid())
  type            IncidentType
  severity        Severity       @default(LOW)
  status          IncidentStatus @default(OPEN)
  
  title           String
  description     String
  location        String?
  
  // Relationships
  reportedById    String
  reportedBy      User           @relation(fields: [reportedById], references: [id])
  restaurantId    String
  restaurant      Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  // Incident details
  witnesses       String?
  evidenceUrls    String[]       // JSON array of evidence file URLs
  actionsTaken    String?
  notes           String?
  
  // Timestamps
  incidentDate    DateTime
  reportedAt      DateTime       @default(now())
  resolvedAt      DateTime?
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("incidents")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum IncidentType {
  HARASSMENT
  DISCRIMINATION
  SAFETY_VIOLATION
  POLICY_VIOLATION
  WORKPLACE_VIOLENCE
  OTHER
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum IncidentStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}
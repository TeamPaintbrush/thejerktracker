// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User roles enum
enum UserRole {
  ADMIN
  STAFF
  DRIVER
}

// Order status enum
enum OrderStatus {
  PENDING
  IN_PROGRESS
  READY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

// Order type enum
enum OrderType {
  DINE_IN
  TAKEOUT
  DELIVERY
}

// User model
model User {
  id           String     @id @default(cuid())
  email        String     @unique
  name         String
  password     String     // Will be hashed
  role         UserRole   @default(STAFF)
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  // Relations
  createdOrders Order[] @relation("OrderCreatedBy")
  updatedOrders Order[] @relation("OrderUpdatedBy")
  
  @@index([email])
  @@index([restaurantId])
}

// Restaurant model
model Restaurant {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  website     String?
  description String?
  logoUrl     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  users  User[]
  orders Order[]
  
  @@index([email])
}

// Order model
model Order {
  id               String      @id @default(cuid())
  orderNumber      String      @unique
  customerName     String
  customerPhone    String
  customerEmail    String?
  totalAmount      Float
  status           OrderStatus @default(PENDING)
  orderType        OrderType   @default(TAKEOUT)
  notes            String?
  specialRequests  String?
  estimatedTime    DateTime?
  actualTime       DateTime?
  deliveryAddress  String?
  restaurantId     String
  restaurant       Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  createdById      String?
  createdBy        User?       @relation("OrderCreatedBy", fields: [createdById], references: [id])
  updatedById      String?
  updatedBy        User?       @relation("OrderUpdatedBy", fields: [updatedById], references: [id])
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  
  // Relations
  items OrderItem[]
  
  @@index([orderNumber])
  @@index([restaurantId])
  @@index([status])
  @@index([createdAt])
}

// Order items model
model OrderItem {
  id          String  @id @default(cuid())
  name        String
  quantity    Int
  price       Float
  notes       String?
  orderId     String
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([orderId])
}

// Session model for NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

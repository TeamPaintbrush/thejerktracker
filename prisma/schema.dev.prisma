// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User roles enum
enum UserRole {
  ADMIN
  STAFF
  DRIVER
}

// Order status enum
enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Payment method enum
enum PaymentMethod {
  CASH
  CARD
  DIGITAL
}

// User model for authentication and role management
model User {
  id           String     @id @default(cuid())
  email        String     @unique
  password     String
  name         String
  role         UserRole   @default(STAFF)
  phone        String?
  address      String?
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  accounts     Account[]
  sessions     Session[]
  orders       Order[]    @relation("DriverOrders")
  deliveries   DeliveryTracking[]
  activityLogs ActivityLog[]
}

// NextAuth.js Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// NextAuth.js Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Restaurant model for managing delivery locations
model Restaurant {
  id        String   @id @default(cuid())
  name      String
  address   String
  phone     String
  email     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders    Order[]
}

// Order model for tracking deliveries
model Order {
  id                     String        @id @default(cuid())
  orderNumber            String        @unique
  restaurantId           String
  deliveryAddress        String
  customerName           String
  customerPhone          String
  customerEmail          String?
  items                  String        // JSON string of order items
  totalAmount            Float
  paymentMethod          PaymentMethod
  status                 OrderStatus   @default(PENDING)
  driverId               String?
  pickupTime             DateTime?
  deliveryTime           DateTime?
  estimatedDeliveryTime  DateTime?
  specialInstructions    String?
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt

  // Relations
  restaurant             Restaurant    @relation(fields: [restaurantId], references: [id])
  driver                 User?         @relation("DriverOrders", fields: [driverId], references: [id])
  deliveryTracking       DeliveryTracking?
}

// Delivery tracking model for real-time updates
model DeliveryTracking {
  id               String   @id @default(cuid())
  orderId          String   @unique
  driverId         String
  currentLocation  String?
  estimatedArrival DateTime?
  status           String
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  order            Order    @relation(fields: [orderId], references: [id])
  driver           User     @relation(fields: [driverId], references: [id])
}

// Activity log for audit trail
model ActivityLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  details   String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])
}